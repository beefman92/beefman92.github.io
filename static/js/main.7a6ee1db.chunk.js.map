{"version":3,"sources":["assets/screenshot-1.png","assets/screenshot-2.png","assets/screenshot-3.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["drawerWidth","useStyles","makeStyles","theme","root","display","appBar","width","marginLeft","drawer","flexShrink","drawerPaper","toolbar","mixins","content","flexGrow","backgroundColor","palette","background","default","padding","spacing","image","container","AutoPlaySwipeableViews","autoPlay","SwipeableViews","App","classes","useState","screenshotIndex","setScreenshotIndex","videoSectionRef","useRef","screenshotSectionRef","binarySectionRef","docSectionRef","postmortemSectionRef","className","CssBaseline","AppBar","position","Toolbar","Typography","variant","noWrap","Drawer","paper","anchor","Divider","List","ListItem","button","onClick","current","scrollIntoView","behavior","ListItemIcon","PlayArrow","ListItemText","primary","PhotoLibrary","Computer","Description","Assessment","Grid","item","xs","ref","url","index","interval","onChangeIndex","style","src","screenshot1","alt","screenshot2","screenshot3","Pagination","count","page","onChange","event","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a6ee1db.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/screenshot-1.8dced7a4.png\";","export default __webpack_public_path__ + \"static/media/screenshot-2.26862044.png\";","export default __webpack_public_path__ + \"static/media/screenshot-3.4bf02341.png\";","import React, { useState, Fragment, useRef } from 'react';\nimport {\n  Grid,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  makeStyles,\n  Button,\n  CssBaseline,\n  Drawer,\n  Divider,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from '@material-ui/core';\nimport {\n  Description,\n  Assessment,\n  PhotoLibrary,\n  PlayArrow,\n  Computer,\n} from '@material-ui/icons';\nimport SwipeableViews from 'react-swipeable-views';\nimport { autoPlay } from 'react-swipeable-views-utils';\nimport { Pagination } from '@material-ui/lab';\nimport ReactPlayer from 'react-player';\nimport screenshot1 from './assets/screenshot-1.png';\nimport screenshot2 from './assets/screenshot-2.png';\nimport screenshot3 from './assets/screenshot-3.png';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3),\n  },\n  image: {\n    width: '900px',\n  },\n  container: {\n    width: `calc(100% - ${drawerWidth}px)`,\n  },\n}));\n\nconst AutoPlaySwipeableViews = autoPlay(SwipeableViews);\n\nfunction App() {\n  const classes = useStyles();\n  const [screenshotIndex, setScreenshotIndex] = useState<number>(0);\n  const videoSectionRef = useRef<HTMLSpanElement>(null);\n  const screenshotSectionRef = useRef<HTMLSpanElement>(null);\n  const binarySectionRef = useRef<HTMLSpanElement>(null);\n  const docSectionRef = useRef<HTMLSpanElement>(null);\n  const postmortemSectionRef = useRef<HTMLSpanElement>(null);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position='fixed' className={classes.appBar}>\n        <Toolbar>\n          <Typography variant='h5' noWrap>\n            CS5850 - Breakout - Yibo Zhao\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant='permanent'\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor='left'\n      >\n        <div className={classes.toolbar} />\n        <Divider />\n        <List>\n          <ListItem\n            button\n            key={'video'}\n            onClick={() => {\n              videoSectionRef.current?.scrollIntoView({\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <ListItemIcon>\n              <PlayArrow />\n            </ListItemIcon>\n            <ListItemText primary={'Video'} />\n          </ListItem>\n          <ListItem\n            button\n            key={'screenshot'}\n            onClick={() => {\n              screenshotSectionRef.current?.scrollIntoView({\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <ListItemIcon>\n              <PhotoLibrary />\n            </ListItemIcon>\n            <ListItemText primary={'Screenshots'} />\n          </ListItem>\n          <ListItem\n            button\n            key={'binary'}\n            onClick={() => {\n              binarySectionRef.current?.scrollIntoView({ behavior: 'smooth' });\n            }}\n          >\n            <ListItemIcon>\n              <Computer />\n            </ListItemIcon>\n            <ListItemText primary={'Binary'} />\n          </ListItem>\n          <ListItem\n            button\n            key={'docs'}\n            onClick={() => {\n              docSectionRef.current?.scrollIntoView({ behavior: 'smooth' });\n            }}\n          >\n            <ListItemIcon>\n              <Description />\n            </ListItemIcon>\n            <ListItemText primary={'Docs'} />\n          </ListItem>\n          <ListItem\n            button\n            key={'postmortem'}\n            onClick={() => {\n              postmortemSectionRef.current?.scrollIntoView({\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <ListItemIcon>\n              <Assessment />\n            </ListItemIcon>\n            <ListItemText primary={'Postmortem'} />\n          </ListItem>\n        </List>\n        <Divider />\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Grid className={classes.container} container spacing={3}>\n          <Grid item xs={12}>\n            <Typography variant='h6' ref={videoSectionRef}>\n              Video\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <ReactPlayer url='https://youtu.be/T4WsCNirTaI' />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='h6' ref={screenshotSectionRef}>\n              Screenshots\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <AutoPlaySwipeableViews\n              index={screenshotIndex}\n              interval={5000}\n              onChangeIndex={(index) => setScreenshotIndex(index)}\n              style={{ width: '900px' }}\n            >\n              <img\n                className={classes.image}\n                src={screenshot1}\n                alt='screenshot 1'\n              />\n              <img\n                className={classes.image}\n                src={screenshot2}\n                alt='screenshot 2'\n              />\n              <img\n                className={classes.image}\n                src={screenshot3}\n                alt='screenshot 3'\n              />\n            </AutoPlaySwipeableViews>\n            <Pagination\n              count={3}\n              page={screenshotIndex}\n              onChange={(event, page) => setScreenshotIndex(page)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='h6' ref={binarySectionRef}>\n              Binary\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='body1'>\n              <ul>\n                <li>\n                  For <a href='binary/breakout-windows-x64.zip'>windows x64</a>\n                </li>\n              </ul>\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='h6' ref={docSectionRef}>\n              Documentation\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='body1'>\n              Available <a href='docs/index.html'>on this site</a>.\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Divider />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='h6' ref={postmortemSectionRef}>\n              Postmortem\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant='body1'>\n              <ul>\n                <li>\n                  Refactor the class inheritance. This project has a three level\n                  inheritance \"Object - Rectangle - Other type classes\". This\n                  design has redundancy since Rectangle is the only direct\n                  subclass. Besides, manager classes all have startUp() and\n                  shutdown(). It would better to design a abstract class to\n                  represent this type of class.\n                </li>\n                <li>\n                  Use Quadtree in collision detection. All bricks store in a\n                  vector, and collision detection linear scan of the vector. It\n                  works if the scale of data is small, but it is better to use\n                  Quadtree to reduce search space when computing collisions.\n                </li>\n                <li>\n                  Add items. With some items, like increasing the speed of ball,\n                  and lengthening or shortening the racket, this game could have\n                  more fun.\n                </li>\n                <li>\n                  Make this game more configurable. Currently, some parts of the\n                  game is configurable. For example, the map of each level and\n                  properties of bricks are configurable. But, we could push this\n                  game forward. We could make some basic attributes configurable\n                  too, like the speed of ball and racket, the total level of\n                  this game. Further, we could build a game editor for this game\n                  to visualize all configurable components and enable users to\n                  save their creation.\n                </li>\n              </ul>\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Divider />\n          </Grid>\n        </Grid>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}